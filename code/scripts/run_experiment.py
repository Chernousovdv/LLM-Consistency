import os
import argparse
from tqdm import tqdm
from src.experiment import PersonalityExperiment
from src.utils import ExperimentLogger
from src.utils import create_numbered_folder
from src.generate_scores import save_scores_list, generate_random_scores_list
from src.data_processing import create_comparison_df
import time


def main(
    descr_temp,
    descr_max_token=1000,
    n_iters=1,
    output_dir="run",
    n_persons=1,
    prompt_name="prompt1.jinja",
    order="01234",
):
    # Create numbered output folder
    folder_name = create_numbered_folder(f"results/{output_dir}")
    print(f"Created output folder: {folder_name}")

    # Generate scores list
    #traits = ["harm avoidance", "passion for long-term goals", "Tolerance for Ambiguity", "Alexithymia", "Need for Cognition"]
    traits = ["Conservative", "Ambitious", "Delicate", "Presumptuous", "Superficial"]
    scores_list = generate_random_scores_list(n=n_persons, order=order)
    save_scores_list(scores_list, folder_name)

    # Run experiments
    results = []
    q = []
    for i, scores in tqdm(enumerate(scores_list), desc="Outer Loop"):
        for j in tqdm(range(n_iters), desc="Inner Loop", leave=False):
            time.sleep(2)
            experiment = PersonalityExperiment(
                traits=list(scores.keys()),
                true_scores=scores,
                description_prompt=prompt_name,
                scoring_prompt=prompt_name,
            )

            trial_result = experiment.run_trial(
                {"temperature": descr_temp, "max_tokens": descr_max_token}
            )
            q.append(trial_result["llm_scores"])
            q[-1]["person"] = i
            trial_result["person"] = i
            results.append(trial_result)

    if results:
        # Save results with trial ID
        ExperimentLogger.save_results(
            results, os.path.join(folder_name, f"experiment.jsonl")
        )

        # Create and save comparison dataframe
        true_score_df, pred_score_df, delta_score_df = create_comparison_df(
            scores_list, q
        )
        true_score_df.to_csv(
            os.path.join(folder_name, "true_score_df.csv"), index=False
        )
        pred_score_df.to_csv(
            os.path.join(folder_name, "pred_score_df.csv"), index=False
        )
        delta_score_df.to_csv(
            os.path.join(folder_name, "delta_score_df.csv"), index=False
        )
        print(f"Results saved to: {folder_name}")
    else:
        print("Warning: No results to save")


if __name__ == "__main__":
    if not os.path.exists("results"):
        os.makedirs("results")
        print(f"Folder results created successfully!")
    parser = argparse.ArgumentParser(description="Experiment")
    parser.add_argument(
        "--temp",
        type=float,
        required=True,
        help="Temperature parameter for description of a person generated by LLM",
    )
    parser.add_argument(
        "--max_tokens",
        type=int,
        default=1000,
        required=False,
        help="Maximum tokens for description of a person generated by LLM",
    )
    parser.add_argument(
        "--n_iters",
        type=int,
        default=1,
        required=False,
        help="Number of iterations per score set",
    )
    parser.add_argument(
        "--out",
        type=str,
        default="run",
        required=False,
        help="Name of the subfolder in the results folder where results will be saved (default: 'run_n')",
    )
    parser.add_argument(
        "--n_persons",
        type=int,
        default=1,
        required=False,
        help="Number of score sets",
    )
    parser.add_argument(
        "--prompt_name",
        type=str,
        default="prompt1.jinja",
        required=False,
        help="Name of the file where prompt is stored. Both scoring and describing prompt should have the same name and located at  prompts/describing or prompts/scoring",
    )
    parser.add_argument(
        "--order",
        type=str,
        default="01234",
        required=False,
        help="order in which big five traits are prompted",
    )
    args = parser.parse_args()
    main(
        args.temp,
        args.max_tokens,
        args.n_iters,
        args.out,
        args.n_persons,
        args.prompt_name,
        args.order,
    )
